const express = require("express");
const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const session = require("express-session");
const mysql = require("mysql2/promise");

const app = express();
const PORT = 3000;

// 세션 설정
app.use(
  session({ secret: "your-secret-key", resave: true, saveUninitialized: true })
);

// Passport 초기화 및 세션 설정
app.use(passport.initialize());
app.use(passport.session());

// MySQL 연결 설정
const dbConnection = mysql.createPool({
  host: "127.0.0.1",
  user: "root",
  password: "",
  database: "picchat",
  port: 8806,  // MySQL 포트 번호 추가
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

// Google 로그인 설정
passport.use(
  new GoogleStrategy(
    {
      clientID: "",
      clientSecret: "",
      callbackURL: "http://localhost:3000/auth/google/callback",
    },
    async (accessToken, refreshToken, profile, done) => {
      try {
        const [rows] = await dbConnection.execute(
          "SELECT * FROM user WHERE email = ?",
          [profile.emails[0].value]
        );

        if (rows.length === 0) {
          const [insertResult] = await dbConnection.execute(
            "INSERT INTO user (userName, password, email, nickname) VALUES (?, ?, ?, ?)",
            [profile.displayName, "defaultpassword", profile.emails[0].value, profile.displayName]
          );

          if (insertResult.affectedRows > 0) {
            const [newUser] = await dbConnection.execute(
              "SELECT * FROM user WHERE email = ?",
              [profile.emails[0].value]
            );
            return done(null, newUser[0]);
          } else {
            return done(new Error("Failed to insert user data"), null);
          }
        } else {
          return done(null, rows[0]);
        }
      } catch (err) {
        console.error("Error accessing user:", err);
        return done(err, null);
      }
    }
  )
);

passport.serializeUser((user, done) => {
  done(null, user.idUser);
});

passport.deserializeUser(async (id, done) => {
  try {
    const [rows] = await dbConnection.execute("SELECT * FROM user WHERE idUser = ?", [id]);
    if (rows.length > 0) {
      done(null, rows[0]);
    } else {
      done(new Error("User not found"), null);
    }
  } catch (err) {
    done(err, null);
  }
});

// 기본 페이지 라우트 추가
app.get("/", (req, res) => {
  res.send(`
    <h1>Welcome to the Google Login App</h1>
    <a href="/auth/google">Login with Google</a>
  `);
});

app.get(
  "/auth/google",
  passport.authenticate("google", { scope: ["profile", "email"] })
);

app.get(
  "/auth/google/callback",
  passport.authenticate("google", { failureRedirect: "/" }),
  (req, res) => {
    res.redirect("/profile");
  }
);

app.get("/profile", (req, res) => {
  if (!req.isAuthenticated()) {
    return res.redirect("/");
  }
  res.send(`<h1>Welcome, ${req.user.nickname}!</h1>`);
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
